/*
COLORS:
Light green: #7ed56f
Medium green: #55c57a
Dark green: #28b485
*/
/* This is a common technique called a CSS reset.
Different browsers use different default margins, causing sites to look different by margins. 
The * means "all elements" (a universal selector), so we are setting all elements to have zero margins, and zero padding, 
thus making them look the same in all browsers. */
* {
  margin: 0;
  padding: 0;
/*   The box-sizing property can be used to adjust this behavior:
content-box gives you the default CSS box-sizing behavior.
    If you set an element's width to 100 pixels, then the element's
    content box will be 100 pixels wide, and the width of any 
    border or padding will be added to the final rendered width,
    making the element wider than 100px.
border-box tells the browser to account for any border and padding in the values
    you specify for an element's width and height. If you set an element's width to 100 pixels,
    that 100 pixels will include any border or padding you added, 
    and the content box will shrink to absorb that extra width. This typically makes it much easier to size elements. */
  box-sizing: border-box;
}
body {
  font-family: "Lato", sans-serif;
  font-weight: 400;
  font-size: 16px;
  line-height: 1.7;
  color: #777;
  padding: 30px;
}

.header {
/*   95% height of viewport means display screen */
  height: 95vh;
/*   The linear-gradient() function sets a linear gradient as the background image.
  To create a linear gradient you must define at least two color stops. 
  Color stops are the colors you want to render smooth transitions among. 
  You can also set a starting point and a direction (or an angle) along with the gradient effect. */
  background-image: linear-gradient(
      to right bottom,
      rgba(126, 213, 111, 0.801),
      rgba(40, 180, 133, 0.801)
    ),
    url("../img/hero.jpg");
/*   background-size: auto|length|cover|contain|initial|inherit;
  auto-	Default value. The background image is displayed in its original size	
length-	Sets the width and height of the background image. 
  The first value sets the width, the second value sets the height.
  If only one value is given, the second is set to "auto". Read about length units	
percentage-	Sets the width and height of the background image in percent of the parent element. 
  The first value sets the width, the second value sets the height. If only one value is given, the second is set to "auto"	
cover-	Resize the background image to cover the entire container, 
  even if it has to stretch the image or cut a little bit off one of the edges	
contain-	Resize the background image to make sure the image is fully visible	
initial-	Sets this property to its default value. Read about initial	
inherit-	Inherits this property from its parent element. Read about inherit */
  background-size: cover;
  set background-img to top
  background-position: top;
  position: relative;
  clip-path: polygon(0 0, 100% 0, 100% 75vh, 0 100%);
}

.logo-box {
  position: absolute;
  top: 40px;
  left: 40px;
}

.logo {
  height: 35px;
}

.heading-primary {
  color: #fff;
  text-transform: uppercase;
  backface-visibility: hidden;
  margin-bottom: 60px;
}

.text-box {
  position: absolute;
  transform: translate(-50%, -50%);
  top: 40%;
  left: 50%;
  text-align: center;
}

.heading-primary-main {
  letter-spacing: 35px;
  font-weight: 400px;
  display: block;
  font-size: 60px;
  animation-name: moveInLeft;
  animation-duration: 1s;
  animation-duration: 1s;
  animation-timing-function: ease-out;

  /*
animation-delay: 3s;
animation-iteration-count: 3;
  */
}

.heading-primary-sub {
  display: block;
  letter-spacing: 17.4px;
  font-weight: 700px;
  font-size: 20px;
  animation: moveInRight 1s ease-out;
}

@keyframes moveInLeft {
  0% {
    opacity: 0;
    transform: translateX(-100px);
  }
  80%{
      transform: translateX(10px);
  }

  100% {
    opacity: 1;
    translate: 0;
  }
}

@keyframes moveInRight {
    0% {
      opacity: 0;
      transform: translateX(100px);
    }
    80%{
        transform: translateX(-10px);
    }
  
    100% {
      opacity: 1;
      translate: 0;
    }
  }

  .btn:link,.btn:visited{
    text-transform: uppercase;
display: inline-block;
text-decoration: none;
padding: 15px 20px;
border-radius: 100px;
transition: all .2s;
position: relative;
  }

.btn:hover{
transform: translateY(-3px);
}

.btn:active{
transform: translateY(-1px);
box-shadow: 0px 10px 20px rgba(0, 0, 0, 0.2);
}
  .btn-white{
    color: #777;

    background-color: #fff;
    box-shadow: 0px 5px 10px rgba(0, 0, 0, 0.2);

  }

  .btn::after{
    content: "";
    top: 0px;
    display: inline-block;
    left: 0px;
    border-radius: 100px;
    height: 100%;
    width: 100%;
    z-index: -1;
    position: absolute;
    transition: all .4sec;
  }

  .btn-white::after{
    background-color: #fff;
   }

  .btn-white:hover::after{
    transform: scaleX(1.4) scaleY(1.6);
    opacity: 0;
  }
  @keyframes moveInBottom {
    0% {
      opacity: 0;
      transform: translateY(30px);
    }
    
  
    100% {
      opacity: 1;
      translate: 0;
    }
  }

  .btn-animated{
    animation: moveInBottom .5s ease-out .75s;
    animation-fill-mode: backwards;
  }
